from random import randrange
from zlib import crc32


def build_packet(string):
    # Magic prefix bytes generated by reverse-engineering the Tapo android app
    #  algorithm found in com\tplink\tdp\common\b.java
    prefix = b'\x02\x00\x00\x01\x00\x00\x11\x00\x00\x00\x00\x00Zk|\x8d'

    output_array = bytearray(prefix + string.encode('utf-8'))

    # Insert dynamic bytes that change based on the string / randomness
    output_array[4:6] = len(string).to_bytes(2, 'big')
    output_array[8:12] = randrange(268435456).to_bytes(4, 'big')

    # Insert checksum based on current array
    output_array[12:16] = crc32(output_array).to_bytes(4, 'big')

    return bytes(output_array)


if __name__ == '__main__':
    import socket
    import json

    from select import select
    from Crypto.PublicKey import RSA

    def broadcast(message, *, timeout=0.2, port=20002):
        sock = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        sock.setblocking(0)

        sock.sendto(message, ("255.255.255.255", port))

        while True:
            data_waiting = select((sock,), (), (), timeout)[0]
            if not data_waiting:
                break

            yield sock.recv(4096)

    # build payload
    key = RSA.generate(2048).publickey().exportKey("PEM")

    payload = json.dumps(
        {'params': {'rsa_key': key.decode("utf-8") + '\n'}},
        separators=(',', ':')
    )

    packet = build_packet(payload)

    for result in broadcast(packet):
        print(result)
        print('-' * 10)
